@page "/auth"
@using WebApp.Services
@using WebApp.Models
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject UsersService _users

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>Username</label>
            <input @bind="_user.Username" class="form-control" placeholder="username" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="_user.Password" type="password" class="form-control" placeholder="password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private User _user;
    protected override async Task OnInitializedAsync()
    {
        _user = new User();
    }

    private async Task Authenticate()
    {
        try
        {
            if (_user.Username != "" && _user.Password != "")
            {
                var userInfo = await _users.SignIn(_user); //TODO: Perdaryt pagal nauja AuthProvider struktura
                if (userInfo != null || userInfo.Username != "")
                {
                    var authProvider = (AuthProvider)authStateProvider;
                    await authProvider.UpdateAuthState(
                        new User
                            {
                                Id = userInfo.Id,
                                Username = userInfo.Username,
                                Password = userInfo.Password,
                                Email = userInfo.Email,
                                Settings = userInfo.Settings
                            });
                    navManager.NavigateTo("/overview", true);
                }
                else
                {
                    await js.InvokeVoidAsync("alert", "Username or Password is invalid!");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Authenticate: {ex}");
        }
    }
}