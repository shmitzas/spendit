@page "/settings"
@using WebApp.Services
@using WebApp.Models.Users
@using WebApp.Auth
@using System.Text.Json
@using System.Text.RegularExpressions
@inject IJSRuntime js
@inject UsersService usersService
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject InputValidationService validationService
@inject AlertsService alertsService
@attribute [Authorize]

<PageTitle>Spendit - Settings</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="row justify-content-center">
            <div class="col-8">
                <h3 class="mb-2 text-start">Account settings</h3>
                <div class="row justify-content-center bg-body">
                    <div class="col-10 mt-4 mb-4">
                        @if (_init)
                        {
                            <div class="row mb-3">
                                <label for="staticEmail" class="col-sm-3 col-form-label">Username</label>
                                <div class="col-sm-9">
                                    <input type="text" readonly class="form-control-plaintext" id="staticEmail" value="@_user.Username">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label for="InputEmail" class="col-sm-3 col-form-label">Email address</label>
                                <div class="col-sm-9">
                                    <input @bind="_user.Email" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label for="CurrentPassword" class="col-sm-3 col-form-label">Current password</label>
                                <div class="col-sm-9">
                                    <input @bind="_oldPassword" type="password" class="form-control" id="CurrentPassword" placeholder="Enter current password">
                                </div>
                            </div>
                            <div class="row mb-3">
                                <label for="NewPassword" class="col-sm-3 col-form-label">New password</label>
                                <div class="col-sm-9">
                                    <input @bind="_newPassword" type="password" class="form-control" id="NewPassword" placeholder="Enter new password">
                                </div>
                            </div>
                            <div class="row mb-5 form-group text-start">
                                <label class="col-sm-3" for=" currency">Main currency</label>
                                <div class="col-sm-2">
                                    <select class="form-select col-sm-10" id="currency" aria-label="Currency">
                                        <option selected>@_currentCurrency</option>
                                    </select>
                                </div>
                            </div>
                            <button class="btn btn-success" @onclick="UpdateSettings">Save changes</button>
                            <button class="btn btn-danger" @onclick="DeleteAccount">Delete account</button>
                        }
                        else
                        {
                            <div class="row justify-content-center mt-5">
                                <div class="spinner-border text-info" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>
@code {
    private string _oldPassword;
    private string _newPassword;
    private User _user;
    private bool _init = false;
    private string _currentCurrency;
    private AuthProvider authProvider;
    private List<string> _Currencies = new List<string> { "EUR" };
    private Dictionary<string, string> _settings;

    protected override async Task OnInitializedAsync()
    {
        authProvider = (AuthProvider)authStateProvider;
        _user = await authProvider.GetCurrentUserAsync();
        await GetCurrency(_user.Settings);
        _init = true;
    }
    private async Task GetCurrency(string settings)
    {
        try
        {
            _settings = JsonSerializer.Deserialize<Dictionary<string, string>>(settings);
            _currentCurrency = string.IsNullOrEmpty(_settings["currency"]) ? "EUR" : _settings["currency"];
        }
        catch
        {
            await alertsService.InvokeError();
        }
    }
    private async Task UpdateSettings()
    {
        try
        {
            if (_user.Password != _oldPassword)
            {
                await alertsService.InvokeWarning("Current password is incorrect!");
                return;
            }

            if (!string.IsNullOrEmpty(_user.Email) && !await validationService.ValidateEmail(_user.Email))
            {
                await alertsService.InvokeWarning("Email address contains illegal characters or is incorrect!");
                return;
            }

            if (!string.IsNullOrEmpty(_newPassword))
            {
                if (!await validationService.CheckPasswordRequirements(_newPassword))
                {
                    await alertsService.InvokeWarning("Password must be at least 8 characters long!");
                    return;
                }
                if (!await validationService.ValidatePassword(_newPassword))
                {
                    await alertsService.InvokeWarning("Current password contains illegal characters!");
                    return;
                }
                _user.Password = _newPassword;
            }

            _settings["currency"] = _currentCurrency;
            _user.Settings = JsonSerializer.Serialize(_settings);

            UpdateUser updateUser = await ToUpdateModel();

            if (await usersService.UpdateUser(updateUser))
            {
                await alertsService.InvokeSuccess("Your information has been updated!");
                await authProvider.UpdateAuthState(_user);
                navManager.NavigateTo("/settings", true);
            }
            else
            {
                await alertsService.InvokeError();
            }
        }
        catch (Exception)
        {
            await alertsService.InvokeError();
        }
    }
    private async Task DeleteAccount()
    {
        try
        {
            if (await alertsService.InvokeConfirmation())
            {
                if (await usersService.DeleteUser(_user.Id))
                {
                    await alertsService.InvokeSuccessTimer("Account deleted successfuly!", 2000);
                    await authProvider.UpdateAuthState(null);
                    navManager.NavigateTo("/", true);
                }
                else
                {
                    await alertsService.InvokeError();
                }
            }
        }
        catch
        {
            await alertsService.InvokeError();
        }
    }
    private async Task<UpdateUser> ToUpdateModel()
    {
        return new UpdateUser
            {
                Id = _user.Id,
                Password = _user.Password,
                Email = _user.Email,
                Settings = _user.Settings
            };
    }
}