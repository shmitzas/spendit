@page "/settings"
@using WebApp.Services
@using WebApp.Models
@using WebApp.Auth
@using System.Text.Json
@using System.Text.RegularExpressions
@inject IJSRuntime js
@inject UsersService _users
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject SweetAlertService alertService
@attribute [Authorize]

<PageTitle>Spendit - Settings</PageTitle>

<div class="row">
    <div class="col-12 mt-5 mb-5">
        <h2 class="text-center">Account settings</h2>
        @if (_user == null || _CurrentCurrency == null)
        {
            <div class="text-center">Loading...</div>
        }
        else
        {
            <div class="row mb-3">
                <label for="staticEmail" class="col-sm-2 col-form-label">Username</label>
                <div class="col-sm-10">
                    <input type="text" readonly class="form-control-plaintext" id="staticEmail" value="@_user.Username">
                </div>
            </div>
            <div class="row mb-3">
                <label for="InputEmail" class="col-sm-2 col-form-label">Email address</label>
                <div class="col-sm-10">
                    <input @bind="_user.Email" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
                </div>
            </div>
            <div class="row mb-3">
                <label for="CurrentPassword" class="col-sm-2 col-form-label">Current password</label>
                <div class="col-sm-10">
                    <input @bind="_oldPassword" type="password" class="form-control" id="CurrentPassword" placeholder="Enter current password">
                </div>
            </div>
            <div class="row mb-3">
                <label for="NewPassword" class="col-sm-2 col-form-label">New password</label>
                <div class="col-sm-10">
                    <input @bind="_newPassword" type="password" class="form-control" id="NewPassword" placeholder="Enter new password">
                </div>
            </div>
            <div class="row mb-3">
                <label for="dropdown" class="col-sm-2 col-form-label">Main currency</label>
                <div class="col-sm-10">
                    <div class="dropdown">
                        <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            @_CurrentCurrency
                        </button>
                        @*<ul class="dropdown-menu" onchange="UpdateCurrency(this.value)">
                    @foreach (var currency in _Currencies)
                    {
                    if (_CurrentCurrency != currency)
                    {
                    <li><a class="dropdown-item" href="settings" value="@currency">@currency</a></li>
                    }
                    }
                    </ul>*@
                    </div>
                </div>
            </div>
            <button class="btn btn-primary" @onclick="UpdateSettings">Save changes</button>
            <button class="btn btn-danger" @onclick="DeleteAccount">Delete account</button>
        }
    </div>
</div>

@code {
    private string _oldPassword;
    private string _newPassword;
    private User _user;
    private string _CurrentCurrency;
    private AuthProvider authProvider;
    private List<string> _Currencies = new List<string> { "EUR" };
    private Dictionary<string, string> _settings;

    protected override async Task OnInitializedAsync()
    {
        authProvider = (AuthProvider)authStateProvider;
        _user = await authProvider.GetCurrentUserAsync();

        await GetCurrency(_user.Settings);

        var alert = alertService.Mixin(new SweetAlertOptions
            {
                Title = "Error",
            });
    }

    protected async Task GetCurrency(string settings)
    {
        _settings = JsonSerializer.Deserialize<Dictionary<string, string>>(settings);

        if (_settings["currency"] == "" || _settings["currency"] == null)
        {
            _CurrentCurrency = "EUR";
        }
        else
        {
            _CurrentCurrency = _settings["currency"];
        }
    }

    private async Task UpdateSettings()
    {
        if (_user.Password == _oldPassword)
        {
            if (!String.IsNullOrEmpty(_user.Email))
            {
                if (await ValidateEmail(_user.Email))
                {
                    if (!String.IsNullOrEmpty(_newPassword))
                    {
                        if (await ValidatePassword(_newPassword))
                        {
                            if (await CheckPasswordLenght(_newPassword))
                            {
                                _user.Password = _newPassword;
                            }
                            else
                            {
                                await alertService.FireAsync(new SweetAlertOptions
                                    {
                                        Title = "Warning",
                                        Text = "Password must be at least 8 characters long!",
                                        Icon = SweetAlertIcon.Warning,
                                        ConfirmButtonText = "Ok",
                                    });
                            }
                        }
                        else
                        {
                            await alertService.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Warning",
                                    Text = "Current password contains illegal characters!",
                                    Icon = SweetAlertIcon.Warning,
                                    ConfirmButtonText = "Ok",
                                });
                        }
                    }
                    _settings["currency"] = _CurrentCurrency;
                    _user.Settings = JsonSerializer.Serialize(_settings);

                    bool res = await _users.UpdateUser(_user);
                    if (res)
                    {
                        var confirmation = await alertService.FireAsync(new SweetAlertOptions
                            {
                                Title = "Success",
                                Text = "Your information has been updated!",
                                Icon = SweetAlertIcon.Success,
                                ConfirmButtonText = "Ok",
                            });
                        if (confirmation.IsConfirmed || confirmation.IsDismissed)
                        {
                            await authProvider.UpdateAuthState(_user);
                            navManager.NavigateTo("/settings", true);
                        }
                    }
                    else
                    {
                        await alertService.FireAsync(new SweetAlertOptions
                            {
                                Title = "Error",
                                Text = "Oops... An error occured, please try again.",
                                Icon = SweetAlertIcon.Error,
                                ConfirmButtonText = "Ok",
                            });
                    }
                }
                else
                {
                    await alertService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Warning",
                            Text = "Email address contains illegal characters or is incorrect!",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                        });
                }
            }
            else
            {
                await alertService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Warning",
                        Text = "You have to enter an email address!",
                        Icon = SweetAlertIcon.Warning,
                        ConfirmButtonText = "Ok",
                    });
            }
        }
        else
        {
            await alertService.FireAsync(new SweetAlertOptions
                {
                    Title = "Warning",
                    Text = "Current password is incorrect!",
                    Icon = SweetAlertIcon.Warning,
                    ConfirmButtonText = "Ok",
                });
        }
    }

    protected void UpdateCurrency(string newCurrency)
    {
        _CurrentCurrency = newCurrency;
    }
    private async Task DeleteAccount()
    {
        var confirmation = await alertService.FireAsync(new SweetAlertOptions
            {
                Title = "Are you sure?",
                Text = "This action is irreversible! Are you sure you want to do this?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Yes",
                CancelButtonText = "No"
            });
        if (confirmation.IsConfirmed || confirmation.IsDismissed)
        {
            bool res = await _users.DeleteUser(_user.Id);
            if (res)
            {
                await alertService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Success",
                        Text = "Account deleted successfuly!",
                        Icon = SweetAlertIcon.Success,
                        Timer = 2000
                    });
                await authProvider.UpdateAuthState(null);
                navManager.NavigateTo("/", true);
            }
            else
            {
                await alertService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Oops... An error occured, please try again.",
                        Icon = SweetAlertIcon.Error,
                        ConfirmButtonText = "Ok",
                    });
            }
        }
    }
    private async Task<bool> CheckPasswordLenght(string input)
    {
        if (input.Length < 8)
            return false;
        else
        {
            return true;
        }
    }
    private async Task<bool> ValidatePassword(string input)
    {
        if (Regex.IsMatch(input, @"^[a-zA-Z0-9!@#$%^&*()\-+=\[\]{};:'"",.<>/?\\|]+$"))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    private async Task<bool> ValidateEmail(string input)
    {
        if (Regex.IsMatch(input, @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}