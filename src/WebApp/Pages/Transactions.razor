@page "/transactions"
@using System.Text.Json
@using System.Linq
@using WebApp.Services
@using WebApp.Models.Transactions
@using WebApp.Models.Categories
@using WebApp.Models.Users
@using WebApp.Auth
@using System.Text.RegularExpressions
@inject TransactionsService transactionsService
@inject CategoriesService categoriesService
@inject AuthenticationStateProvider authStateProvider
@inject AlertsService alertsService
@inject CategoryIconsService categoryIconsService
@inject InputValidationService validationService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Spendit - Transactions</PageTitle>
<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-12">
                <div class="row justify-content-center bg-body pb-3 pt-3">
                    <div class="row justify-content-center align-items-center">
                        <div class="col-10 align-items-center">
                            <div class="row justify-content-center align-items-center text-center">
                                <hr class="col-5 mb-0 border-primary border-1 opacity-100 me-2">
                                <button @onclick="FilterStatus" class="col btn btn-outline-primary rounded-pill" type="button" data-bs-toggle="collapse" data-bs-target="#filters" aria-expanded="false" aria-controls="filters">
                                    <span class="fw-semibold">Filters</span> <i class="fa-sharp fa-solid @_filterArrow"></i>
                                </button>
                                <hr class="col-5 mb-0 border-primary border-1 opacity-100 ms-2">
                            </div>
                        </div>
                    </div>
                    <div class="row mt-5 collapse justify-content-center" id="filters">
                        <div class="col-6 mb-5">
                            <div class="wrapper">
                                <div class="searchBar rounded-pill shadow-sm">
                                    <input @onkeyup="SearchOnEnter" @bind="_query" id="searchQueryInput" type="text" name="searchQueryInput" placeholder="Search" />
                                    <button @onclick="Search" id="searchQuerySubmit" type="submit" name="searchQuerySubmit">
                                        <i class="fa fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-8">
                            <div class="row justify-content-center align-items-center">
                                <div class="col-2 text-end">
                                    <span>Perdiod</span>
                                </div>
                                <div class="col-4">
                                    <input @bind="@_startDate" type="date" class="form-control" id="dateFrom" placeholder="Start date">
                                </div>
                                <div class="col-4">
                                    <input @bind="@_endDate" type="date" class="form-control" id="dateTo" placeholder="End date">
                                </div>
                                <div class="col-2">
                                    <button @onclick="Filter" class="btn btn-success rounded-pill">Apply</button>
                                </div>
                            </div>
                            <div class="row justify-content-center align-items-center mt-3">
                                <div class="col-3 text-end">
                                    <span>Select category</span>
                                </div>
                                <div class="col-4 text-start">
                                    <select class='form-select' id='category' aria-label='Category' @onchange="FilterByCategory">
                                        @if (_categories != null && _categories.Count() > 0)
                                        {
                                            @foreach (var category in _categories)
                                            {
                                                <option value="@category.Name">@category.Name</option>
                                            }

                                        }
                                    </select>
                                </div>
                            </div>
                            <div class="row justify-content-center mt-5">
                                <div class="col-4 text-center">
                                    <button @onclick="RemoveFilters" class="btn btn-primary rounded-pill">Remove filters</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-5 align-items-center mb-2">
                    <div class="col">
                        <h3 class="m-0">All transactions</h3>
                    </div>
                    <div class="col text-right">
                        <button @onclick="AddTransaction" class="btn btn-success rounded-5 float-end shadow-sm">+</button>
                    </div>
                </div>
                <div class="row bg-body shadow-sm">
                    <div class="col-12 pt-2">
                        <table class="table table-hover">
                            <thead class="border-bottom-1">
                                <tr>
                                    <th scope="col" class="col-1 text-center">Category</th>
                                    <th scope="col" class="col-4 text-center">Description</th>
                                    <th scope="col" class="col-2 text-center">Type</th>
                                    <th scope="col" class="col-2 text-center text-primary">
                                        <span @onclick="OrderByDate" role="button">Date <i class="fa-solid @_orderByDate"></i></span>
                                        <label class="form-check-label  ms-2" for="showTime">Time</label>
                                        <input class="form-check-input" type="checkbox" id="showTime" @bind="_showTime" @onclick="ShowTime">

                                    </th>
                                    <th scope="col" class="col-2 text-center text-primary"><span @onclick="OrderByAmount" role="button">Ammount <i class="fa-solid @_orderByAmount"></i></span></th>
                                    <th scope="col" class="col-1 text-center">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (_transactions != null && _transactions.Count() > 0 && _categories != null && _categories.Count() > 0)
                                {
                                    for (int i = 0; i < _transactions.Count(); i++)
                                    {
                                        var tr = _transactions.ElementAt(i);
                                        string categoryIcon = GetCategoryIcon(tr.CategoryId).Result;
                                        <tr class="align-middle">
                                            <td class="text-center"><button class="btn btn-info rounded-5 opacity-100 pt-2 pb-2" disabled><i class="@categoryIcon"></i></button></td>
                                            <td class="">@TransactionDescLenght(tr.Description).Result</td>
                                            <td class=" text-center">@tr.Type</td>
                                            <td class=" text-center">@tr.CreatedAt.ToString(@_dateFormat)</td>
                                            @if (tr.Type == "Expense")
                                            {
                                                <td class="text-center text-danger">-@tr.Amount @tr.Currency</td>
                                            }
                                            else
                                            {
                                                <td class="text-center text-success">+@tr.Amount @tr.Currency</td>
                                            }
                                            <td class="text-center">
                                                <button @onclick="()=>EditTransaction(tr.Id)" class="btn btn-info rounded-5 btn-sm"><i class="fa-solid fa-pen"></i></button>
                                                <button @onclick="()=>DeleteTransaction(tr.Id)" class="btn btn-danger rounded-5 btn-sm"><i class="fa-solid fa-trash"></i></button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
    </NotAuthorized>
</AuthorizeView>


@code {
    private AuthProvider _authProvider;
    private IEnumerable<Transaction>? _transactions;
    private IEnumerable<Category>? _categories;
    private User _user;
    private string _orderByDate = "fa-sort-down";
    private string _orderByAmount = "fa-sort-down";
    private string _filterArrow = "fa-chevron-down";
    private bool _showTime = false;
    private string _query;
    private bool _dateSelected = false;
    private int _selectedId;
    private string _dateFormat = "yyyy-MM-dd";
    private DateTime _startDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    private DateTime _endDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1).AddMonths(1).AddSeconds(-1);

    protected override async Task OnInitializedAsync()
    {
        _authProvider = (AuthProvider)authStateProvider;
        _user = await _authProvider.GetCurrentUserAsync();
        await LoadTransactions();
        await LoadCategories();
    }
    private async Task LoadTransactions()
    {
        try
        {
            _transactions = await transactionsService.GetTransactions(_user.Id);
        }
        catch (Exception ex)
        {
            await alertsService.InvokeError();
        }
    }
    private async Task LoadCategories()
    {
        try
        {
            _categories = await categoriesService.GetCategories();
        }
        catch (Exception ex)
        {
            await alertsService.InvokeError();
        }
    }
    private async Task<string> GetCategoryName(int id)
    {
        return _categories.Where(c => c.Id == id).Single().Name;
    }
    private async Task<string> GetCategoryIcon(int id)
    {
        try
        {
            string categoryName = await GetCategoryName(id);
            string icon = await categoryIconsService.GetIconByName(categoryName);
            return icon;
        }
        catch (Exception ex)
        {
            return await categoryIconsService.GetIconByName(String.Empty);
        }
    }
    private async Task OrderByDate()
    {
        if (_orderByDate == "fa-sort-down")
        {
            _transactions = _transactions.OrderBy(t => t.CreatedAt);
            _orderByDate = "fa-sort-up";
            StateHasChanged();
        }
        else
        {
            _transactions = _transactions.OrderByDescending(t => t.CreatedAt);
            _orderByDate = "fa-sort-down";
            StateHasChanged();
        }
    }
    private async Task OrderByAmount()
    {
        if (_orderByAmount == "fa-sort-down")
        {
            _transactions = _transactions.OrderBy(t => t.Amount);
            _orderByAmount = "fa-sort-up";
            StateHasChanged();
        }
        else
        {
            _transactions = _transactions.OrderByDescending(t => t.Amount);
            _orderByAmount = "fa-sort-down";
            StateHasChanged();
        }
    }
    private async Task AddTransaction()
    {
        try
        {
            var swalResult = await JSRuntime.InvokeAsync<string>("showAddTransactionModal", _categories);
            if (swalResult == null)
            {
                return;
            }

            var transactionDict = JsonSerializer.Deserialize<Dictionary<string, string>>(swalResult);
            var transactionToAdd = await ToAddModel(transactionDict);
            if (!await ValidateNewTransaction(transactionToAdd))
            {
                return;
            }

            var success = await transactionsService.AddTransaction(transactionToAdd);
            if (success)
            {
                await LoadTransactions();
                StateHasChanged();
            }
            else
            {
                await alertsService.InvokeCustomError("Transaction was not added!");
            }
        }
        catch (Exception ex)
        {
            await alertsService.InvokeError();
        }
    }
    private async Task EditTransaction(Guid transactionId)
    {
        try
        {
            var tr = _transactions.Where(t => t.Id == transactionId).Single();
            var trOtherType = tr.Type == "Expense" ? "Income" : "Expense";
            var currentCategory = _categories.Where(c => c.Id == tr.CategoryId).Single().Name;
            var otherCategories = _categories.Where(c => c.Id != tr.CategoryId).ToList();

            var swalResult = await JSRuntime.InvokeAsync<string>("showEditTransactionModal", tr.Description, tr.Amount, tr.Currency, tr.Type, trOtherType, tr.CreatedAt, currentCategory, otherCategories);
            if (swalResult != null)
            {
                var transaction = await ToUpdateModel(JsonSerializer.Deserialize<Dictionary<string, string>>(swalResult), tr.Id);
                transaction.Id = transactionId;
                if (await ValidateExistingTransaction(transaction))
                {
                    if (await transactionsService.UpdateTransaction(transaction))
                    {
                        await LoadTransactions();
                        StateHasChanged();
                    }
                    else
                    {
                        await alertsService.InvokeCustomError("Transaction data was not updated!");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await alertsService.InvokeError();
        }
    }
    private async Task DeleteTransaction(Guid transactionId)
    {
        try
        {
            if (await alertsService.InvokeConfirmation())
            {
                if (await transactionsService.DeleteTransaction(_user.Id, transactionId))
                {
                    await LoadTransactions();
                    StateHasChanged();
                }
                else
                {
                    await alertsService.InvokeCustomError("Transaction was not removed!");
                }
            }
        }
        catch (Exception ex)
        {
            await alertsService.InvokeError();
        }
    }
    private async Task Search()
    {
        if (String.IsNullOrEmpty(_query))
        {
            _transactions = await transactionsService.GetTransactions(_user.Id);
        }
        else
        {
            _transactions = await transactionsService.Search(_user.Id, _query);
            if (_transactions.Count() < 1) alertsService.InvokeCustomWarning("No transactions found");
        }
        StateHasChanged();
    }
    private async Task Filter()
    {
        if (await validationService.ValidateDate(_startDate.ToString()) && await validationService.ValidateDate(_endDate.ToString()))
        {
            var endDate = _endDate.AddDays(1);
            _transactions = await transactionsService.GetTransactionsByDate(_user.Id, _startDate, endDate);
            if (_transactions.Count() < 1) alertsService.InvokeCustomWarning("No transactions found");
            _dateSelected = true;
            StateHasChanged();
        }
    }
    private async Task RemoveFilters()
    {
        await LoadTransactions();
        _dateSelected = false;
        StateHasChanged();
    }
    private async Task FilterByCategory(ChangeEventArgs e)
    {
        try
        {
            if (await validationService.ValidateDate(_startDate.ToString()) && await validationService.ValidateDate(_endDate.ToString()))
            {
                if (_dateSelected)
                {
                    var endDate = _endDate.AddDays(1);
                    _transactions = await transactionsService.GetTransactionsByDateAndCategory(_user.Id, _startDate, endDate, e.Value.ToString());
                    if (_transactions.Count() < 1) alertsService.InvokeCustomWarning("No transactions found");
                    StateHasChanged();
                }
                else
                {
                    _transactions = await transactionsService.GetTransactionsByCategory(_user.Id, e.Value.ToString());
                    if (_transactions.Count() < 1) alertsService.InvokeCustomWarning("No transactions found");
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    private async Task FilterStatus()
    {
        if (_filterArrow == "fa-chevron-down")
        {
            _filterArrow = "fa-chevron-up";
            StateHasChanged();
        }
        else
        {
            _filterArrow = "fa-chevron-down";
            StateHasChanged();
        }
    }
    private async Task ShowTime()
    {
        if (!_showTime)
        {
            _dateFormat = "yyyy-MM-dd HH:MM";
            StateHasChanged();
        }
        else
        {
            _dateFormat = "yyyy-MM-dd";
            StateHasChanged();
        }
    }
    private async Task<string> TransactionDescLenght(string input)
    {
        try
        {
            int maxLength = 110;
            return input.Length > maxLength ? input.Substring(0, maxLength) + "..." : input;
        }
        catch (Exception ex)
        {
            return String.Empty;
        }
    }
    private async void SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }
    private async Task<UpdateTransaction> ToUpdateModel(Dictionary<string, string> data, Guid id)
    {
        try
        {
            var category = _categories.Where(c => c.Name == data["category"]).Single();
            return new UpdateTransaction
                {
                    Id = id,
                    UserId = _user.Id,
                    CategoryId = category.Id,
                    Description = data["description"],
                    Amount = Decimal.Parse(data["amount"]),
                    Currency = data["currency"],
                    Type = data["type"],
                    CreatedAt = DateTime.Parse(data["date"]).ToLocalTime()
                };
        }
        catch (Exception ex)
        {
            await alertsService.InvokeError();
            return new UpdateTransaction();
        }
    }
    private async Task<NewTransaction> ToAddModel(Dictionary<string, string> data)
    {
        try
        {
            var category = _categories.Where(c => c.Name == data["category"]).Single();
            return new NewTransaction
                {
                    UserId = _user.Id,
                    CategoryId = category.Id,
                    Description = data["description"],
                    Amount = Decimal.Parse(data["amount"]),
                    Currency = data["currency"],
                    Type = data["type"],
                    CreatedAt = DateTime.Parse(data["date"]).ToLocalTime()
                };
        }
        catch (Exception ex)
        {
            await alertsService.InvokeError();
            return new NewTransaction();
        }
    }
    private async Task<bool> ValidateNewTransaction(NewTransaction transaction)
    {
        if (!String.IsNullOrEmpty(transaction.Description) && await validationService.ValidateText(transaction.Description))
        {
            if (!String.IsNullOrEmpty(transaction.Amount.ToString()) && await validationService.ValidateDecimal(transaction.Amount.ToString()))
            {
                if (!String.IsNullOrEmpty(transaction.Currency) && await validationService.ValidateText(transaction.Currency))
                {
                    if (!String.IsNullOrEmpty(transaction.CreatedAt.ToString()) && await validationService.ValidateDate(transaction.CreatedAt.ToString()))
                    {
                        return true;
                    }
                    else
                    {
                        await alertsService.InvokeWarning("Date's format is incorrect!");
                    }
                }
                else
                {
                    await alertsService.InvokeWarning("Currency's format is incorrect!");
                }
            }
            else
            {
                await alertsService.InvokeWarning("Ammount is incorrect!");
            }
        }
        else
        {
            await alertsService.InvokeWarning("Description text contains illegal characters!");
        }
        return false;
    }
    private async Task<bool> ValidateExistingTransaction(UpdateTransaction transaction)
    {
        if (!String.IsNullOrEmpty(transaction.Description) && await validationService.ValidateText(transaction.Description))
        {
            if (!String.IsNullOrEmpty(transaction.Amount.ToString()) && await validationService.ValidateDecimal(transaction.Amount.ToString()))
            {
                if (!String.IsNullOrEmpty(transaction.Currency) && await validationService.ValidateText(transaction.Currency))
                {
                    if (!String.IsNullOrEmpty(transaction.CreatedAt.ToString()) && await validationService.ValidateDate(transaction.CreatedAt.ToString()))
                    {
                        return true;
                    }
                    else
                    {
                        await alertsService.InvokeWarning("Date's format is incorrect!");
                    }
                }
                else
                {
                    await alertsService.InvokeWarning("Currency's format is incorrect!");
                }
            }
            else
            {
                await alertsService.InvokeWarning("Ammount is incorrect!");
            }
        }
        else
        {
            await alertsService.InvokeWarning("Description text contains illegal characters!");
        }
        return false;
    }
}
