@page "/transactions"
@using System.Text.Json;
@using WebApp.Services
@using WebApp.Models
@using WebApp.Auth
@using System.Text.RegularExpressions
@inject TransactionsService transactionsService
@inject AuthenticationStateProvider authStateProvider
@inject SweetAlertService alertService
@inject InputValidationService validationService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Spendit - Transactions</PageTitle>
<AuthorizeView>
    <Authorized>
        <div class="row">
            <div class="col-12 mt-5 mb-5">
                <div class="row justify-content-center">
                    <div class="col-6 mt-5 mb-5 justify-content-center rounded-pill">
                        <div class="wrapper">
                            <div class="searchBar">
                                <input @onkeyup="SearchOnEnter" @bind="_query" id="searchQueryInput" type="text" name="searchQueryInput" placeholder="Search" />
                                <button @onclick="Search" id="searchQuerySubmit" type="submit" name="searchQuerySubmit">
                                    <i class="fa fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-5 align-items-center">
                    <div class="col">
                        <h2 class="m-0">All transactions</h2>
                    </div>
                    <div class="col text-right">
                        <button @onclick="AddTransaction" class="btn btn-success rounded-5 float-end">+</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th scope="col" class="col-4">Description</th>
                                    <th scope="col" class="col-2">Type</th>
                                    <th scope="col" class="col-3"><a @onclick="OrderByDate" href="/transactions">Date <i class="fa-sharp fa-solid @orderByDate"></i></a></th>
                                    <th scope="col" class="col-2"><a @onclick="OrderByAmount" href="/transactions">Ammount <i class="fa-sharp fa-solid @orderByAmount"></i></a></th>
                                    <th scope="col" class="col-3"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (transactions != null && transactions.Count() > 0)
                                {
                                    foreach (var tr in transactions)
                                    {
                                        <tr>
                                            <td>@tr.Description</td>
                                            <td>@tr.Type</td>
                                            <td>@tr.CreatedAt.ToString("yyyy-MM-dd")</td>
                                            <td>@tr.Amount @tr.Currency</td>
                                            <td>
                                                <button @onclick="()=>EditTransaction(tr.Id)" class="btn btn-success rounded-5 btn-sm"><i class="fa-solid fa-pen"></i></button>
                                                <button @onclick="()=>DeleteTransaction(tr.Id)" class="btn btn-danger rounded-5 btn-sm"><i class="fa-solid fa-trash"></i></button>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <Unauthorized />
    </NotAuthorized>
</AuthorizeView>



@code {
    private AuthProvider authProvider;
    private IEnumerable<Transaction>? transactions;
    private string orderByDate;
    private string orderByAmount;
    private User _user;
    private string _query;
    private int _selectedId;
    protected override async Task OnInitializedAsync()
    {
        authProvider = (AuthProvider)authStateProvider;
        _user = await authProvider.GetCurrentUserAsync();
        //transactions = await transactionsService.GetTransactions(_user.Id);
        await LoadTransactions();
        orderByDate = "fa-sort-down";
        orderByAmount = "fa-sort-down";
    }
    private async Task LoadTransactions()
    {
        try
        {
            transactions = await transactionsService.GetTransactions(_user.Id);
        }
        catch (Exception ex)
        {
            await InvokeError();
        }
    }
    private async Task OrderByDate()
    {
        if (this.orderByDate == "fa-sort-down")
        {
            transactions = transactions.OrderBy(t => t.CreatedAt);
            orderByDate = "fa-sort-up";
            StateHasChanged();
        }
        else
        {
            transactions = transactions.OrderByDescending(t => t.CreatedAt);
            orderByDate = "fa-sort-down";
            StateHasChanged();
        }

    }
    private async Task OrderByAmount()
    {
        if (this.orderByAmount == "fa-sort-down")
        {
            transactions = transactions.OrderBy(t => t.Amount);
            orderByAmount = "fa-sort-up";
            StateHasChanged();
        }
        else
        {
            transactions = transactions.OrderByDescending(t => t.Amount);
            orderByAmount = "fa-sort-down";
            StateHasChanged();
        }
    }
    private async Task AddTransaction() //Perdaryt su NewTransaction
    {
        try
        {
            var swalResult = await JSRuntime.InvokeAsync<string>("showAddTransactionModal");
            var transaction = await ToModel(JsonSerializer.Deserialize<Dictionary<string, string>>(swalResult));
            if (await ValidateTransaction(transaction))
            {
                if (await transactionsService.AddTransaction(transaction))
                {
                    await LoadTransactions();
                    StateHasChanged();
                }
                else
                {
                    await alertService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = "Transaction was not added!",
                            Icon = SweetAlertIcon.Error,
                            ConfirmButtonText = "Ok",
                        });
                }
            }
        }
        catch (Exception ex)
        {
            await InvokeError();
        }
    }

    private async Task EditTransaction(int transactionId)
    {
        try
        {
            var tr = await transactionsService.GetTransaction(_user.Id, transactionId);
            var swalResult = await JSRuntime.InvokeAsync<string>("showEditTransactionModal", tr.Description, tr.Amount, tr.Currency, tr.Type, tr.CreatedAt);
            if (swalResult != null)
            {
                var transaction = await ToModel(JsonSerializer.Deserialize<Dictionary<string, string>>(swalResult));
                transaction.Id = transactionId;
                if (await ValidateTransaction(transaction))
                {
                    if (await transactionsService.UpdateTransaction(transaction))
                    {
                        await LoadTransactions();
                        StateHasChanged();
                    }
                    else
                    {
                        await alertService.FireAsync(new SweetAlertOptions
                            {
                                Title = "Error",
                                Text = "Transaction data was not updated!",
                                Icon = SweetAlertIcon.Error,
                                ConfirmButtonText = "Ok",
                            });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await InvokeError();
        }
    }
    private async Task DeleteTransaction(int transactionId)
    {
        try
        {
            var confirmation = await alertService.FireAsync(new SweetAlertOptions
                {
                    Title = "Are you sure?",
                    Text = "This action is irreversible! Are you sure you want to do this?",
                    Icon = SweetAlertIcon.Warning,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Yes",
                    CancelButtonText = "No"
                });
            if (confirmation.IsConfirmed || confirmation.IsDismissed)
            {
                if (await transactionsService.DeleteTransaction(_user.Id, transactionId))
                {
                    await LoadTransactions();
                    StateHasChanged();
                }
                else
                {
                    await alertService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = "Transaction was not removed!",
                            Icon = SweetAlertIcon.Error,
                            ConfirmButtonText = "Ok",
                        });
                }
            }
        }
        catch (Exception ex)
        {
            await InvokeError();
        }
    }
    private async Task<Transaction> ToModel(Dictionary<string, string> data)
    {
        try
        {
            return new Transaction
                {
                    Id = 0,
                    UserId = _user.Id,
                    CategoryId = 0,
                    Description = data["description"],
                    Amount = Decimal.Parse(data["amount"]),
                    Currency = data["currency"],
                    Type = data["type"],
                    CreatedAt = DateTime.Parse(data["date"])
                };
        }
        catch (Exception ex)
        {
            await InvokeError();
            return new Transaction();
        }
    }
    private async Task Search()
    {
        if (String.IsNullOrEmpty(_query))
        {
            transactions = await transactionsService.GetTransactions(_user.Id);
        }
        else
        {
            transactions = await transactionsService.Search(_user.Id, _query);
        }
        StateHasChanged();
    }
    private async void SearchOnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Search();
        }
    }
    private async Task InvokeError()
    {
        await alertService.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = "Oops... An error occured, please try again.",
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "Ok",
            });
    }
    private async Task<bool> ValidateTransaction(Transaction transaction)
    {
        if (!String.IsNullOrEmpty(transaction.Description) && await validationService.ValidateText(transaction.Description))
        {
            if (!String.IsNullOrEmpty(transaction.Amount.ToString()) && await validationService.ValidateDecimal(transaction.Amount.ToString()))
            {
                if (!String.IsNullOrEmpty(transaction.Currency) && await validationService.ValidateText(transaction.Currency))
                {
                    if (!String.IsNullOrEmpty(transaction.CreatedAt.ToString()) && await validationService.ValidateDate(transaction.CreatedAt.ToString()))
                    {
                        return true;
                    }
                    else
                    {
                        await alertService.FireAsync(new SweetAlertOptions
                            {
                                Title = "Warning",
                                Text = "Date's format is incorrect!",
                                Icon = SweetAlertIcon.Warning,
                                ConfirmButtonText = "Ok",
                            });
                    }
                }
                else
                {
                    await alertService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Warning",
                            Text = "Currency's format is incorrect!",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                        });
                }
            }
            else
            {
                await alertService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Warning",
                        Text = "Ammount is incorrect!",
                        Icon = SweetAlertIcon.Warning,
                        ConfirmButtonText = "Ok",
                    });
            }
        }
        else
        {
            await alertService.FireAsync(new SweetAlertOptions
                {
                    Title = "Warning",
                    Text = "Description text contains illegal characters!",
                    Icon = SweetAlertIcon.Warning,
                    ConfirmButtonText = "Ok",
                });
        }
        return false;
    }
}

